#!/usr/bin/env python3
import os
import emails
import reports
import json
import locale
import sys


def load_data(filename):
  """Loads the contents of filename as a JSON file."""
  with open(filename) as json_file:
    data = json.load(json_file)
  return data


def format_car(car):
  """Given a car dictionary, returns a nicely formatted name."""
  return "{} {} ({})".format(
      car["car_make"], car["car_model"], car["car_year"])


def process_data(data):
  """Analyzes the data, looking for maximums.

  Returns a list of lines that summarize the information.
  """
  max_revenue = {"revenue": 0}
  for item in data:
    # Calculate the revenue generated by this model (price * total_sales)
    # We need to convert the price from "$1234.56" to 1234.56
    item_price = locale.atof(item["price"].strip("$"))
    item_revenue = item["total_sales"] * item_price
    if item_revenue > max_revenue["revenue"]:
      item["revenue"] = item_revenue
      max_revenue = item


    # TODO: also handle max sales
    car_model = item['car']['car_model']
    sales = item['total_sales']
    car_sales = {}

    if car_model in car_sales:
      car_sales[car_model] += sales
    else:
      car_sales[car_model] = sales
    most_sold_car = max(car_sales, key=car_sales.get)
    most_sold_sales = car_sales[most_sold_car]


    # TODO: also handle most popular car_year
    car_counts = {}
    car_year = item['car']['car_year']
    sales = item['total_sales']
    if car_year in car_counts:
      car_counts[car_year] += sales
    else:
      car_counts[car_year] = sales
  most_popular_year = max(car_counts, key=car_counts.get)
  total_sales_in_year = car_counts[most_popular_year]

  summary = [
    "The {} generated the most revenue: ${}".format(
      format_car(max_revenue["car"]), max_revenue["revenue"]),
    f"The {most_sold_car} had the most sales: {most_sold_sales}",
    f"The most popular year was {most_popular_year} with {total_sales_in_year} sales."
  ]

  return summary


def cars_dict_to_table(data):
  """Turns the data in car_data into a list of lists."""
  table_data = [["ID", "Car", "Price", "Total Sales"]]
  for item in data:
    table_data.append([item["id"], format_car(item["car"]), item["price"], item["total sales"]])
  return table_data



def main(argv):
  """Process the JSON data and generate a full report out of it."""
  data = load_data("car_sales.json")
  summary = process_data(data)
  print(summary)
  # TODO: turn this into a PDF report
  separator = ","
  reports.generate("report.pdf", "Sales summary for last month",separator.join(summary), cars_dict_to_table(data))

  sender = "automation@example.com"
  reciever = "{}@example.com".format(os.environ.get('USER'))
  subject = "Sales summary for last month"
  body = separator.join(summary)
  # TODO: send the PDF report as an email attachment
  message = emails.generate(sender, reciever, subject, body, "report.pdf")
  emails.send(message)



if __name__ == "__main__":
  main(sys.argv)


